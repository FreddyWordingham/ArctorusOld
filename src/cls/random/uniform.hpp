/**
 *  @author Freddy Wordingham
 *  @email  fjmw201@exeter.ac.uk
 *
 *  @date   25/01/2018.
 */



//  == GUARD ==
#ifndef ARCTORUS_SRC_CLS_RANDOM_UNIFORM_HPP
#define ARCTORUS_SRC_CLS_RANDOM_UNIFORM_HPP



//  == INCLUDES ==
//  -- System --
#include <cassert>
#include <cstdint>
#include <limits>



//  == NAMESPACE ==
namespace arc
{
    namespace random
    {



        //  == CLASS ==
        /**
         *  A sudo-random number generator capable of producing sudo random numbers with uniform probability.
         *  Primarily used to generate random doubles between zero and unity.
         */
        class Uniform
        {
            //  == TYPE DEFINITIONS ==
          public:
            //  -- Generation --
            using base = uint64_t;  //! Base type generated by this class.


            //  == FIELDS ==
          private:
            //  -- Seed --
            const base m_seed;  //! Seed used to initialise the generator.

            //  -- Generation Variables --
            base m_u;   //! First value used in the generation of random values.
            base m_v;   //! Second value used in the generation of random values.
            base m_w;   //! Third value used in the generation of random values.


            //  == INSTANTIATION ==
          public:
            //  -- Singleton --
            static Uniform& get_instance(base t_seed = 0);

          private:
            //  -- Constructors --
            explicit Uniform(base t_seed);

            //  -- Initialisation --
            void init_generation_variables();


            //  == OPERATORS ==
          public:
            //  -- Generation --
            inline double operator()(double t_min = 0.0, double t_max = 1.0);


            //  == METHODS ==
          private:
            //  -- Generation --
            base gen_base();
        };



        //  == OPERATORS ==
        //  -- Generation --
        /**
         *  Generate a random double value between the given minimum and maximum bound.
         *  Values within the range have a uniform probability of generation over time.
         *
         *  @param  t_min   Minimum bound for the generated value.
         *  @param  t_max   Maximum bound for the generated value.
         *
         *  @pre    t_min must be less than t_max.
         *
         *  @return A random double between the given bounds.
         */
        inline double Uniform::operator()(const double t_min, const double t_max)
        {
            assert(t_min < t_max);

            return (t_min + ((t_max - t_min) * (static_cast<double>(gen_base()) / static_cast<double>(std::numeric_limits<
                base>::max()))));
        }



    } // namespace random
} // namespace arc



//  == GUARD END ==
#endif // ARCTORUS_SRC_CLS_RANDOM_UNIFORM_HPP
